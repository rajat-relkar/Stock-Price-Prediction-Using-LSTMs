# Microsoft Stock Price Prediction with LSTM

## Overview
This project implements a Long Short-Term Memory (LSTM) neural network to predict Microsoft stock prices based on historical closing prices. The model uses TensorFlow and Keras, with data preprocessing and visualization handled using Pandas, NumPy, and Matplotlib/Seaborn.

The dataset (`MicrosoftStock.csv`) contains historical stock data, including open, close, high, low, and volume. The model is trained on 95% of the data and tested on the remaining 5%, using a sliding window of 60 days to predict the next day's closing price.

## Features
- Data visualization of open/close prices, trading volume, and feature correlations.
- Preprocessing with StandardScaler for normalization.
- LSTM model with multiple layers, dropout for regularization, and dense layers for output.
- Evaluation using Mean Absolute Error (MAE) and Root Mean Squared Error (RMSE).
- Visualization of actual vs. predicted stock prices.

## Requirements
- Python 3.8+
- Libraries:
  - tensorflow
  - pandas
  - numpy
  - scikit-learn
  - matplotlib
  - seaborn

## Usage
1. Ensure the dataset `MicrosoftStock.csv` is in the project directory.
2. Run the script:
   ```bash
   main.py
   ```
3. The script will:
   - Load and preprocess the data.
   - Generate visualizations (open/close prices, volume, correlation heatmap).
   - Train the LSTM model for 40 epochs.
   - Make predictions on the test set.
   - Display a plot comparing actual and predicted closing prices.

## File Structure
- `stock_prediction.py`: Main script containing the LSTM model, data preprocessing, and visualizations.
- `MicrosoftStock.csv`: Dataset with historical Microsoft stock data.
- `Images/`: Folder containing visualization outputs (e.g., plots and model architecture).
- `README.md`: This file.
- `requirements.txt`: List of required Python packages.

## Dataset
The dataset (`MicrosoftStock.csv`) includes the following columns:
- `date`: Date of the stock data.
- `open`: Opening price.
- `close`: Closing price.
- `high`: Highest price of the day.
- `low`: Lowest price of the day.
- `volume`: Trading volume.

## Model Architecture
- **Input Layer**: Accepts sequences of 60 days of scaled closing prices.
- **LSTM Layers**: Two LSTM layers (64 units each), with the first returning sequences.
- **Dense Layer**: 128 units with ReLU activation.
- **Dropout Layer**: 35% dropout for regularization.
- **Output Layer**: Single unit for predicting the next day's closing price.
- **Optimizer**: Adam.
- **Loss Function**: Mean Absolute Error (MAE).
- **Metrics**: Root Mean Squared Error (RMSE).

## Visualizations
Below are the key visualizations generated by the script:

1. **Open and Close Prices Over Time**: Shows the trend of Microsoft's open and close prices from 2013 to 2018.
   ![Open-Close Prices Over Time](Images/open_close.png)

2. **Feature Correlation Heatmap**: Displays the correlation between numeric features (open, close, high, low, volume).
   ![Feature Correlation Heatmap](Images/heatmap.png)

3. **Close Prices Over Time**: Visualizes the closing prices from 2013 to 2018.
   ![Close Prices Over Time](Images/close_prices.png)

4. **LSTM Model Architecture**: Diagram of the LSTM model layers and their input/output shapes.
   ![LSTM Model Architecture](Images/model.png)

5. **Stock Price Predictions**: Compares actual closing prices with predicted values for the test period (late 2017 to early 2018).
   ![Stock Price Predictions](Images/predictions.png)

## Results
The model generates predictions for the test set (last 5% of the data). A plot is displayed showing:
- Actual closing prices (orange).
- Predicted closing prices (red).

## Notes
- The model uses a 60-day sliding window, which can be adjusted by modifying the code.
- The training/test split is 95%/5%, adjustable via the `trainingDataLength` variable.
- The model is trained for 40 epochs, but this can be tuned for better performance.
